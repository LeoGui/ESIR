// GRECO Vincent & GUILPAIN Léo

package messagerie;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.ListIterator;

public class Operateur{
/**
 * Un Opérateur gère des abonnés et des communications
 */
	//attributs 
	private List<AbonneOperateur> liste;
	private String nomOperateur;
	private List<Appel> listeAp;

	
	//Constructeur
	public Operateur(String nomOperateur){
		List<AbonneOperateur> liste = new ArrayList <AbonneOperateur>();
		this.liste = liste;
		this.nomOperateur = nomOperateur;
		List<Appel> listeAp = new ArrayList <Appel>();
		this.listeAp = listeAp;
	}	
	
	
  /**
   * Une personne souscrit un abonnement et reçoit un téléphone
   */
  public Telephone souscrire(String nomPersonne, String nomForfait) {
    NumeroTelephone numero = new NumeroTelephone();
    Telephone tel = null;
    Forfait nomF = new Forfait(nomForfait);
    AbonneOperateur abonne = new AbonneOperateur(tel,nomF,nomPersonne,numero);
    Telephone telephone = new Telephone(abonne);
    liste.add(abonne);
    return telephone;
  }


	/*	
   * Établir une communication
   * @param emetteur
   * @param numeroDestinataire
   * @param msgVocal : message en cas d'indisponibilité
   * @param dateAppel
   * @return vrai si la communication a été établie
   */
  public boolean etablirCommunication(AbonneOperateur emetteur, String numeroDestinataire,String msgVocal,Date dateAppel)
  {
	  ListIterator <AbonneOperateur> it = liste.listIterator();
	  while(it.hasNext())
	  {
		  AbonneOperateur recepteur = it.next();
		  NumeroTelephone numemet = emetteur.getNum(); // on récupère le numero de telephone de l'emetteur
		  String Numemetteur = numemet.getNum(); // on récupère le numero de telephone(String) de l'emetteur

		  if (numemet.equals(recepteur.getNum())){ //recepteur est connu par l'opérateur

			  //si le recepteur est libre
			  if (recepteur.estLibre()){

				  //si le recepteur accepte l'appel la communication est effectuée
				  if (recepteur.accepterAppel(Numemetteur)){
					  System.out.println("Appel en cours");
					  Appel appel = new Appel(emetteur.getNum(), recepteur.getNum(), dateAppel);
					  this.listeAp.add(appel); //ajout à la liste des appels en cours
					  return true;
				  }

				  //sinon la communication ne se fait pas
				  else{
					  System.out.println("Pas de communication");
					  AbstractCommMessage comMessage = new CommMessageVocal(dateAppel,recepteur.getNum(),emetteur.getNum());
					  MessageVocal message = new MessageVocal(msgVocal,comMessage);
					  recepteur.getBoiteVocale().ajouterMesVoc(message); //laisser un message sur la boite vocale
				  }
			  }
			  
			  //si le recepteur est indisponible
			  else if(recepteur.estHorsLigne()) {System.out.println("Correspondant indisponible");}

		  }

		  //recepteur inconnu par l'opérateur
		  else {System.out.println("Utilisateur inconnu");}
	  }
	  return false;
  }


  /**
   * poster un SMS
   * @param emetteur
   * @param numeroDestinataire
   * @param sms : le texte du SMS
   * @pamra dateEnvoi
   */
  public void posterSMS(AbonneOperateur emetteur, String numeroDestinataire, String sms, Date dateEnvoi)
  {
	  int i = 0;
	  AbonneOperateur recepteur1 = getAbonne(numeroDestinataire);
	  AbstractCommMessage comMessage = new CommSMS(dateEnvoi, emetteur.getNum(), recepteur1.getNum());
	  MessageSMS message = new MessageSMS(sms, comMessage);
	  while ( (i<liste.size()) && (!numeroDestinataire.equals(liste.get(i).getNum().getNum()))) //Tant qu'on a pas atteint le max de la liste et tant qu'on a pas trouvé l'abonné en question.
	  {
		  //Si le numéro passé en paramètre est trouvé dans la liste des abonnés
		  if(numeroDestinataire.equals(liste.get(i).getNum().getNum())) //Comparaison entre le numéro à qui on souhaite envoyer le sms et le numéro de l'abonné dans la liste
		  {
			  AbonneOperateur recepteur2 = liste.get(i);
			  BoiteSMS br = recepteur2.getBoiteSMS();
			  BoiteSMS be = emetteur.getBoiteSMS();
			  br.ajouterSMS(message);
			  be.ajouterSMS(message);//On envoi le SMS sur la boite SMS du destinataire.
			  System.out.println("Message Envoyé !");
			  message = null;
			  break;
		  }
		  i = i+1;
	  }
	 

  }

  /**
   * un abonné met fin à une communication
   * @param abonne : celui qui clôt
   * @param date de fin de communication
   */
  public void cloreAppel(AbonneOperateur abonne, Date fin){
	  Appel appel = getAppel(abonne); //retrouver l'appel correspondant à l'abonné
	  appel.terminerAppel(fin); //terminer l'appel	  
  }
  
  
  public void facturation(AbonneOperateur abonne)
  {
	  System.out.println("Facture de : "+abonne.getNom());
	  System.out.println("Montant : "+getMontantCom(abonne));
  }
  
  public double getMontantCom(AbonneOperateur abonne)
  {
	  double montanttotal = 0;
	  double minutesappels = abonne.getDureeAppels();
	  double montant1 = 0; //montant "1h"
	  double montant2 = 0; //montant à l'acte
	  if (minutesappels > 60) 
	  { 
		  montant1 = abonne.getDureeAppels() - 60; //minutes supplémentaires
		  montant1 = montant1 * 0.15; //facturation
	  }
	  else
	  {
		  montant2 = minutesappels * 0.15; 
	  }
	  double montant3 = abonne.getNbSMS(); //montant messages
	  double consultations = abonne.NbConsultations() * 0.07; //prix relatif aux consultations de la boite vocale
	  if (montant3 > 0) //plus d'un message
	  {
		  montant3 = montant3 * 0.07; //facturation
	  }
	  
	  String f = abonne.getForfait().getNom();
	  if (f.equals("illimité"))
	  {
		  montanttotal = 40;
	  }
	  else if (f.equals("1h"))
	  {
		  montanttotal = 20 + montant1 + montant3 + consultations; //prix de base + frais supplémentaires
	  }
	  else if (f.equals("a l'acte"))
	  {
		  montanttotal = montant2 + montant3 + consultations;
	  }
	return montanttotal;
  }
  
  public Appel getAppel(AbonneOperateur abonne)
  {
	  ListIterator <Appel> it= listeAp.listIterator();
	  while(it.hasNext())
	  {
		  Appel cur = it.next();
		  if(cur.getEmetteur().equals(abonne) || cur.getRecepteur().equals(abonne)) //si l'abonné est l'appelant ou l'appelé
		  {
			  return cur; //renvoi de l'appel
		  }
	  }
	  return null;
  }
  
  public AbonneOperateur getAbonne(String telephone) //donne un AbonneOperateur en fonction d'un numéro
  {
	  ListIterator <AbonneOperateur> it= liste.listIterator();
	  while(it.hasNext())
	  {
		  AbonneOperateur cur = it.next();
		  if(cur.getNum().equals(telephone)) //si l'abonné est l'appelant ou l'appelé
		  {
			  return cur; //renvoi de l'appel
		  }
	  }
	  return null;
	  
  }
  
  public List<AbonneOperateur> getListe(){
	  return liste;
  }
  
  public String getNomOperateur()
  {
	  return nomOperateur;
  }
} // Operateur